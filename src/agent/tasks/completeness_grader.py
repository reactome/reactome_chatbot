from langchain_core.language_models.chat_models import BaseChatModel
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import Runnable
from pydantic import BaseModel, Field

completeness_grader_message = """
You are an expert grader with extensive knowledge in molecular biology and experience as a curator for both Reactome and UniProt knowledgebases.
Your task is to evaluate whether a response generated by an LLM is complete, meaning it addresses the userâ€™s question with necessary details, background information, and context.

Provide a binary output as either:
    - Yes: The response answers the user question and provides enough details and background.
    - No: The response is incomplete, missing key details, or lacking sufficient context.
"""

completeness_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", completeness_grader_message),
        ("human", "User question: \n\n {input} \n\n LLM generation: {generation}"),
    ]
)


class CompletenessGrade(BaseModel):
    binary_score: str = Field(
        description="Answer is complete and provides all necessary background, 'Yes' or 'No'"
    )


def create_completeness_grader(llm: BaseChatModel) -> Runnable:
    return completeness_prompt | llm.with_structured_output(CompletenessGrade)
